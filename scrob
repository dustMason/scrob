#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby

# set the running script to a low priority to avoid interrupting other stuff
Process.setpriority(Process::PRIO_PROCESS, 0, 20)

h = File.dirname($0)

# using Bundler standalone
require "#{h}/bundle/bundler/setup"
require "itunes/library"
require "json/pure"
require "net/http"
require "yaml"
require "pp"

# for 1.8.7
class DateTime
  def to_time
    usec = (sec_fraction * 60 * 60 * 24 * (10**6)).to_i
    Time.gm(year, month, day, hour, min, sec, usec)
  end
end

# look! a monkey!
module ITunes
  class Track
    def last_played_at_timestamp
      self["Play Date"]
    end
    def rating
      self["Rating"] || 0
    end
    def weighted_rating
      if rating == 0 then 50 else rating end
    end
    def number_of_weeks_ago_added
      added = date_added.to_time
      ((Time.now.to_i - added.to_i) / (7*24*60*60*1.0)).abs
    end
    def score
      @score ||= weighted_rating + (number_of_weeks_ago_added * -3) + (play_count * 10)
    end
  end
end

config = YAML.load_file(File.join(ENV['HOME'],".scrob"))

itunes_xml_path = config["itunes_xml_path"] || File.join(ENV['HOME'],"/Music/iTunes/iTunes Music Library.xml")
library = ITunes::Library.load itunes_xml_path

errors = []
errors << "Couldn't find iTunes Music Library at #{itunes_xml_path}" if library["Playlists"].nil?
errors << "Your ~/.scrob file is missing your email" unless config["email"]

unless errors.empty?
  puts errors
  exit
end

# grab all tracks that were listened to within the last week
last_week = DateTime.now - 7
recents = library.music.tracks.select do |track|
  track.last_played_at_timestamp && track.last_played_at > last_week
end

# take those and sort by rating, give list of 30 top rated
recents.sort! { |x,y| y.score <=> x.score }
top_songs = recents.first(30)

# top_songs.each_with_index do |song, i|
#   puts "#{i+1}.  #{song.artist} - #{song.name} (#{song.play_count} plays, #{song.score} score)"
# end

artists = {}
recents.each do |s|
  artists[s.artist] ||= 0
  artists[s.artist] += s.score
end

out = {
  "email" => config["email"],
  "total_song_count" => recents.size,
  "total_play_count" => 0,
  "artists" => artists
}
out["songs"] = top_songs.map do |song|
  out["total_play_count"] += song.play_count
  {
    "title" => song.name,
    "artist" => song.artist,
    "album" => song.album,
    "play_date" => song.last_played_at,
    "rating" => song.rating,
    "play_count" => song.play_count,
    "score" => song.score
  }
end

pp out

# uri = URI('http://httpbin.org/post')
uri = URI('http://dizouble.com/music')
res = Net::HTTP.post_form(uri, 'data' => out.to_json)
# puts res.body

