#!/usr/bin/env python

import datetime
import json
import os
import glob
import httplib, urllib
from plist_parser import XmlPropertyListParser, PropertyListParseError

EPOCH = datetime.datetime(1904, 1, 1, 0, 0)
def to_timestamp(utc_datetime):
    delta = utc_datetime - EPOCH
    return delta.total_seconds()

HOME = os.environ['HOME']
defaults = {
    'itunes_xml_path': os.path.join(HOME, 'Music', 'iTunes', 'iTunes Music Library.xml'),
    'api': 'whaleteeth.herokuapp.com'
}

with open(os.path.join(HOME, '.scrob', 'config.json')) as config_file:
    CONFIG = dict(defaults.items() + json.load(config_file).items())

def get_recently_played_tracks(stream):
    since = to_timestamp(datetime.datetime.utcnow() - datetime.timedelta(days=3))
    parser = XmlPropertyListParser()
    tracks = []
    try:
        plist = parser.parse(stream)
        for trackid in plist['Tracks']:
            if 'Play Date' in plist['Tracks'][trackid]:
                if 'Disabled' not in plist['Tracks'][trackid]:
                    stamp = plist['Tracks'][trackid]['Play Date']
                    if stamp > since:
                        track_data = plist['Tracks'][trackid]
                        track = {
                            "title": track_data['Name'],
                            "artist": track_data['Artist'],
                            "play_date": track_data['Play Date UTC'],
                            "date_added": track_data['Date Added'],
                            "play_count": track_data['Play Count']
                        }
                        if 'Album' in track_data:
                            track['album'] = track_data['Album']
                        if 'Rating' in track_data:
                            track['rating'] = track_data['Rating']
                        tracks.append(track)
    finally:
        stream.close()
        return tracks

stream = open(CONFIG['itunes_xml_path'])
out = {
    "email": CONFIG['email'],
    "time": datetime.datetime.utcnow(),
    "songs": get_recently_played_tracks(stream)
}

stamp = datetime.datetime.now().strftime("%Y-%m-%d")
cached_file = open(os.path.join(HOME, '.scrob', 'cached', stamp+'.json'), 'w')
dthandler = lambda obj: obj.isoformat() if isinstance(obj, datetime.datetime) else None
cached_file.write(json.dumps(out, default=dthandler))
cached_file.close()

for filename in glob.glob(os.path.join(HOME, '.scrob', 'cached', '*.json')):
    with open(filename, "r") as cached:
        params = urllib.urlencode({ 'data': cached.read() })
        conn = httplib.HTTPConnection(CONFIG['api'])
        conn.request("POST", "/songs", params)
        response = conn.getresponse()
        if response.status == 303 or response.status == 200:
            os.remove(filename)
        conn.close() 

